{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","DisplayWindow","props","react_default","a","createElement","className","type","value","expression","disabled","Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","onKeyPressed","text","React","Component","Calculator","_this2","state","onEvaluatePressed","onDeletePressed","bool","index","document","getElementsByClassName","length","setAttribute","removeAttribute","input","flag","indexOf","setClassAttribute","setState","prev","_this3","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","then","response","data","console","log","slice","key","src_Button","src_DisplayWindow","renderNumberKey","renderOperationKey","renderDelete","ReactDOM","render","src_Calculator","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8653d53e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst DisplayWindow = (props) => (\n    <div>\n        <input className='expression' type='text' value={props.expression} disabled={true}/>\n    </div>\n);\n\nclass Button extends React.Component {\n    constructor() {\n        super();\n\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick() {\n        this.props.onKeyPressed(this.props.text);\n    }\n\n    render() {\n        return <button className={this.props.className} onClick={this.onClick}>\n                    {this.props.text}\n               </button>;\n    }\n}\n\nclass Calculator extends React.Component {\n    constructor () {\n        super();\n\n        this.state = {\n            expression: ''\n        };\n\n        this.onKeyPressed = this.onKeyPressed.bind(this);\n        this.onEvaluatePressed = this.onEvaluatePressed.bind(this);\n        this.onDeletePressed = this.onDeletePressed.bind(this);\n    }\n\n    setClassAttribute(bool){\n        for (let index = 0; index < document.getElementsByClassName(\"operation\").length; ++index) {\n           if(bool)\n               document.getElementsByClassName(\"operation\")[index].setAttribute(\"disabled\", 'disabled');\n\n           else document.getElementsByClassName(\"operation\")[index].removeAttribute(\"disabled\");\n        }\n    }\n\n\n    onKeyPressed(input) {\n        const operations = ['/', '*', '+', '-'];\n        let flag = false;\n        if (operations.indexOf(input) > -1) {\n            if (this.state.expression === '') flag = true;\n\n            this.setClassAttribute(true);\n        }\n        else {\n            this.setClassAttribute(false);\n        }\n\n        if(!flag)\n            this.setState((prev) => ({expression: prev.expression + input}));\n    }\n\n\n    onEvaluatePressed() {\n\n        if (this.state.expression !== ''){\n        fetch('/api/hello', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                expression: this.state.expression})\n        }).then(response => response.text())\n          .then(data => {\n                this.setState({expression: data});\n              console.log('post request response data', data);\n                });\n        }\n    }\n\n    onDeletePressed() {\n        this.setState((prev) => ({\n            expression: prev.expression.length <= 1 ? '' : prev.expression.slice(0, -1)}));\n\n        this.setClassAttribute(false);\n    }\n\n    renderNumberKey(key) {\n        return <Button\n            className=\"key\" text={key} onKeyPressed={this.onKeyPressed}\n        />\n    }\n\n    renderOperationKey(key) {\n        return <Button\n            className=\"operation\" text={key} onKeyPressed={this.onKeyPressed}\n        />\n    }\n\n    renderDelete() {\n        return <Button\n            className=\"delete\" text=\"C\" onKeyPressed={this.onDeletePressed}\n        />\n    }\n\n\n    render() {\n\n        return (\n            <div className='container'>\n                <div className='calculator'>\n                    <div className='expression-screen'>\n                    <DisplayWindow expression={this.state.expression}/>\n                    </div>\n                    <div className=\"key-row\">\n                        {this.renderNumberKey(7)}\n                        {this.renderNumberKey(8)}\n                        {this.renderNumberKey(9)}\n                        {this.renderOperationKey('/')}\n                    </div>\n                    <div className=\"key-row\">\n                        {this.renderNumberKey(4)}\n                        {this.renderNumberKey(5)}\n                        {this.renderNumberKey(6)}\n                        {this.renderOperationKey('*')}\n                    </div>\n                    <div className=\"key-row\">\n                        {this.renderNumberKey(1)}\n                        {this.renderNumberKey(2)}\n                        {this.renderNumberKey(3)}\n                        {this.renderOperationKey('-')}\n                    </div>\n                    <div className=\"key-row\">\n                        {this.renderNumberKey(0)}\n                        {this.renderDelete()}\n                        <button className='operation equals' onClick={this.onEvaluatePressed}>=</button>\n                        {this.renderOperationKey('+')}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}